[instructions]

[instructions.END]
pneumonic = "end"
category = "marker"
description = "marker for the end of execution"
value = 0

[instructions.ADD]
pneumonic = "add"
category = "arithmetic"
description = "add the first two values on the stack"
value = 1000

[instructions.SUB]
pneumonic = "subtract"
category = "arithmetic"
description = "subtract the second value on the stack from the first"
value = 1010

[instructions.EQU]
pneumonic = "equal"
category = "comparison"
description = "compare the first two values on the stack for equality"
value = 2000

[instructions.CMP]
pneumonic = "compare"
category = "comparison"
description = "compare first two values on the stack and set -1 if the first is greater, etc"
value = 2010

[instructions.NOT]
pneumonic = "not"
category = "logical"
description = "logically invert the value at the top of the stack"
value = 3000

[instructions.JNZ]
pneumonic = "jump non-zero"
category = "jump"
description = "jump if the value at the top of the stack is non-zero"
value = 4000

[instructions.JNE]
pneumonic = "jump not-equal"
category = "jump"
description = "jump if the first two values on the stack are equal"
value = 4010

[instructions.JGT]
pneumonic = "jump greater-than"
category = "jump"
description = "jump if the value at the top of the stack is greater than the next value"
value = 4020

[instructions.JLT]
pneumonic = "jump less-than"
category = "jump"
description = "jump if the value at the top of the stack is less than the next value"
value = 4030

[instructions.REA]
pneumonic = "read"
category = "memory"
description = "read from the memory location pointed at by the value at the top of the stack and push its value"
value = 5000

[instructions.WRI]
pneumonic = "write"
category = "memory"
description = "write to second value on the stack to the memory location pointed at by the value at the top of the stack"
value = 5010

[instructions.PSH]
pneumonic = "push"
category = "stack"
description = "push a value on to the top of the stack"
value = 6000

[targets]

[targets.c]
prologue = [
    "#ifndef TOWERVM_INSTRUCTIONS_H",
    "#define TOWERVM_INSTRUCTIONS_H",
    "",
    "#include \"memory.h\"",
    "",
]
epilogue = [
    "",
    "#endif // TOWERVM_INSTRUCTIONS_H",
]
template = "const Word {name} = {value};"
imports = []
comment = "//"

[targets.py]
prologue = ["instructions: Dict[str, int] = {"]
epilogue = ["}"]
template = "    \"{name}\": {value},"
imports = ["from typing import Dict"]
comment = "#"
